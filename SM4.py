#!/usr/bin/env python3

# 国密SM4算法实现
# 作者：bufbrane <bufbrane@bufbrane.com>
# 参考文献：中华人民共和国国家标准 GB/T 32907-2016 信息安全技术 SM4分组密码算法
# http://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=7803DE42D3BC5E80B0C3E5D8E873D56A
# 注：下文提到的“字”（word），是指32位无符号整数，下文一般用十六进制表示


"""一些用到的参数"""

# Sbox数据
Sbox = {
    0x00: 0xD6, 0x01: 0x90, 0x02: 0xE9, 0x03: 0xFE,
    0x04: 0xCC, 0x05: 0xE1, 0x06: 0x3D, 0x07: 0xB7,
    0x08: 0x16, 0x09: 0xB6, 0x0A: 0x14, 0x0B: 0xC2,
    0x0C: 0x28, 0x0D: 0xFB, 0x0E: 0x2C, 0x0F: 0x05,

    0x10: 0x2B, 0x11: 0x67, 0x12: 0x9A, 0x13: 0x76,
    0x14: 0x2A, 0x15: 0xBE, 0x16: 0x04, 0x17: 0xC3,
    0x18: 0xAA, 0x19: 0x44, 0x1A: 0x13, 0x1B: 0x26,
    0x1C: 0x49, 0x1D: 0x86, 0x1E: 0x06, 0x1F: 0x99,

    0x20: 0x9C, 0x21: 0x42, 0x22: 0x50, 0x23: 0xF4,
    0x24: 0x91, 0x25: 0xEF, 0x26: 0x98, 0x27: 0x7A,
    0x28: 0x33, 0x29: 0x54, 0x2A: 0x0B, 0x2B: 0x43,
    0x2C: 0xED, 0x2D: 0xCF, 0x2E: 0xAC, 0x2F: 0x62,

    0x30: 0xE4, 0x31: 0xB3, 0x32: 0x1C, 0x33: 0xA9,
    0x34: 0xC9, 0x35: 0x08, 0x36: 0xE8, 0x37: 0x95,
    0x38: 0x80, 0x39: 0xDF, 0x3A: 0x94, 0x3B: 0xFA,
    0x3C: 0x75, 0x3D: 0x8F, 0x3E: 0x3F, 0x3F: 0xA6,

    0x40: 0x47, 0x41: 0x07, 0x42: 0xA7, 0x43: 0xFC,
    0x44: 0xF3, 0x45: 0x73, 0x46: 0x17, 0x47: 0xBA,
    0x48: 0x83, 0x49: 0x59, 0x4A: 0x3C, 0x4B: 0x19,
    0x4C: 0xE6, 0x4D: 0x85, 0x4E: 0x4F, 0x4F: 0xA8,

    0x50: 0x68, 0x51: 0x6B, 0x52: 0x81, 0x53: 0xB2,
    0x54: 0x71, 0x55: 0x64, 0x56: 0xDA, 0x57: 0x8B,
    0x58: 0xF8, 0x59: 0xEB, 0x5A: 0x0F, 0x5B: 0x4B,
    0x5C: 0x70, 0x5D: 0x56, 0x5E: 0x9D, 0x5F: 0x35,

    0x60: 0x1E, 0x61: 0x24, 0x62: 0x0E, 0x63: 0x5E,
    0x64: 0x63, 0x65: 0x58, 0x66: 0xD1, 0x67: 0xA2,
    0x68: 0x25, 0x69: 0x22, 0x6A: 0x7C, 0x6B: 0x3B,
    0x6C: 0x01, 0x6D: 0x21, 0x6E: 0x78, 0x6F: 0x87,

    0x70: 0xD4, 0x71: 0x00, 0x72: 0x46, 0x73: 0x57,
    0x74: 0x9F, 0x75: 0xD3, 0x76: 0x27, 0x77: 0x52,
    0x78: 0x4C, 0x79: 0x36, 0x7A: 0x02, 0x7B: 0xE7,
    0x7C: 0xA0, 0x7D: 0xC4, 0x7E: 0xC8, 0x7F: 0x9E,

    0x80: 0xEA, 0x81: 0xBF, 0x82: 0x8A, 0x83: 0xD2,
    0x84: 0x40, 0x85: 0xC7, 0x86: 0x38, 0x87: 0xB5,
    0x88: 0xA3, 0x89: 0xF7, 0x8A: 0xF2, 0x8B: 0xCE,
    0x8C: 0xF9, 0x8D: 0x61, 0x8E: 0x15, 0x8F: 0xA1,

    0x90: 0xE0, 0x91: 0xAE, 0x92: 0x5D, 0x93: 0xA4,
    0x94: 0x9B, 0x95: 0x34, 0x96: 0x1A, 0x97: 0x55,
    0x98: 0xAD, 0x99: 0x93, 0x9A: 0x32, 0x9B: 0x30,
    0x9C: 0xF5, 0x9D: 0x8C, 0x9E: 0xB1, 0x9F: 0xE3,

    0xA0: 0x1D, 0xA1: 0xF6, 0xA2: 0xE2, 0xA3: 0x2E,
    0xA4: 0x82, 0xA5: 0x66, 0xA6: 0xCA, 0xA7: 0x60,
    0xA8: 0xC0, 0xA9: 0x29, 0xAA: 0x23, 0xAB: 0xAB,
    0xAC: 0x0D, 0xAD: 0x53, 0xAE: 0x4E, 0xAF: 0x6F,

    0xB0: 0xD5, 0xB1: 0xDB, 0xB2: 0x37, 0xB3: 0x45,
    0xB4: 0xDE, 0xB5: 0xFD, 0xB6: 0x8E, 0xB7: 0x2F,
    0xB8: 0x03, 0xB9: 0xFF, 0xBA: 0x6A, 0xBB: 0x72,
    0xBC: 0x6D, 0xBD: 0x6C, 0xBE: 0x5B, 0xBF: 0x51,

    0xC0: 0x8D, 0xC1: 0x1B, 0xC2: 0xAF, 0xC3: 0x92,
    0xC4: 0xBB, 0xC5: 0xDD, 0xC6: 0xBC, 0xC7: 0x7F,
    0xC8: 0x11, 0xC9: 0xD9, 0xCA: 0x5C, 0xCB: 0x41,
    0xCC: 0x1F, 0xCD: 0x10, 0xCE: 0x5A, 0xCF: 0xD8,

    0xD0: 0x0A, 0xD1: 0xC1, 0xD2: 0x31, 0xD3: 0x88,
    0xD4: 0xA5, 0xD5: 0xCD, 0xD6: 0x7B, 0xD7: 0xBD,
    0xD8: 0x2D, 0xD9: 0x74, 0xDA: 0xD0, 0xDB: 0x12,
    0xDC: 0xB8, 0xDD: 0xE5, 0xDE: 0xB4, 0xDF: 0xB0,

    0xE0: 0x89, 0xE1: 0x69, 0xE2: 0x97, 0xE3: 0x4A,
    0xE4: 0x0C, 0xE5: 0x96, 0xE6: 0x77, 0xE7: 0x7E,
    0xE8: 0x65, 0xE9: 0xB9, 0xEA: 0xF1, 0xEB: 0x09,
    0xEC: 0xC5, 0xED: 0x6E, 0xEE: 0xC6, 0xEF: 0x84,

    0xF0: 0x18, 0xF1: 0xF0, 0xF2: 0x7D, 0xF3: 0xEC,
    0xF4: 0x3A, 0xF5: 0xDC, 0xF6: 0x4D, 0xF7: 0x20,
    0xF8: 0x79, 0xF9: 0xEE, 0xFA: 0x5F, 0xFB: 0x3E,
    0xFC: 0xD7, 0xFD: 0xCB, 0xFE: 0x39, 0xFF: 0x48
}

# 系统参数FK
FK = {0x0: 0xA3B1BAC6, 0x1: 0x56AA3350, 0x2: 0x677D9197, 0x3: 0xB27022DC}

# 固定参数CK
CK = {
    0x00: 0x00070E15, 0x01: 0x1C232A31, 0x02: 0x383F464D, 0x03: 0x545B6269,
    0x04: 0x70777E85, 0x05: 0x8C939AA1, 0x06: 0xA8AFB6BD, 0x07: 0xC4CBD2D9,
    0x08: 0xE0E7EEF5, 0x09: 0xFC030A11, 0x0A: 0x181F262D, 0x0B: 0x343B4249,
    0x0C: 0x50575E65, 0x0D: 0x6C737A81, 0x0E: 0x888F969D, 0x0F: 0xA4ABB2B9,

    0x10: 0xC0C7CED5, 0x11: 0xDCE3EAF1, 0x12: 0xF8FF060D, 0x13: 0x141B2229,
    0x14: 0x30373E45, 0x15: 0x4C535A61, 0x16: 0x686F767D, 0x17: 0x848B9299,
    0x18: 0xA0A7AEB5, 0x19: 0xBCC3CAD1, 0x1A: 0xD8DFE6ED, 0x1B: 0xF4FB0209,
    0x1C: 0x10171E25, 0x1D: 0x2C333A41, 0x1E: 0x484F565D, 0x1F: 0x646B7279
}


def RLS32(input: int, shift_amount: int) -> int:
    """
    32位循环左移(Rotate Left Shift)
    input为32位无符号整型
    shift_amount为非负整数
    """

    # 32位截断
    input %= 0x100000000

    # 迭代计算循环移位
    for i in range(shift_amount):

        input <<= 1

        # 将溢出的1加到末尾
        if input // 0x100000000 == 1:
            input %= 0x100000000
            input += 1

    return input


def L(B: int) -> int:
    """
    线性变换
    B为32位无符号整型
    返回值为32位无符号整型
    """
    return B ^ RLS32(B, 2) ^ RLS32(B, 10) ^ RLS32(B, 18) ^ RLS32(B, 24)


def tau(input: int) -> int:
    """
    非线性变换
    input为32位无符号整型
    返回值为32位无符号整型
    """

    a = dict()
    b = dict()

    # 将输入拆成字节
    a[0] = input // 0x01000000
    a[1] = (input & 0x00ff0000) >> 16
    a[2] = (input & 0x0000ff00) >> 8
    a[3] = input % 0x100

    # 查表转换
    b[0] = Sbox[a[0]]
    b[1] = Sbox[a[1]]
    b[2] = Sbox[a[2]]
    b[3] = Sbox[a[3]]

    # 将字节重组为32位无符号整数
    return (b[0] << 24) + (b[1] << 16) + (b[2] << 8) + b[3]


def T(input: int) -> int:
    """
    合成置换，由非线性变换和线性变换复合而成
    input为32位无符号整型
    返回值为32位无符号整型
    """
    return L(tau(input))


def L_prime(B: int) -> int:
    """
    线性变换L'，用于密钥扩展算法的T'
    B为32位无符号整型十六进制数
    返回值为32位无符号整型十六进制数
    """
    return B ^ RLS32(B, 13) ^ RLS32(B, 23)


def T_prime(input: int) -> int:
    """
    合成置换T'，用于密钥扩展算法，T'(...) = L'(tau(...))
    input为32位无符号整型
    返回值为32位无符号整型
    """
    return L_prime(tau(input))


def key_expand(MK: tuple) -> list:
    """
    密钥扩展算法
    MK为4个字的tuple，字格式为32位无符号整型
    返回值为32个字的list，字格式为32位无符号整型
    """

    K = dict()

    # 计算迭代初始值
    K[0] = MK[0] ^ FK[0]
    K[1] = MK[1] ^ FK[1]
    K[2] = MK[2] ^ FK[2]
    K[3] = MK[3] ^ FK[3]
    
    # 计算轮密钥
    for i in range(32):
        K[i+4] = K[i] ^ T_prime(K[i+1] ^ K[i+2] ^ K[i+3] ^ CK[i])
    
    # 注意：rk[i]为K[i+4]，不要搞错了
    rk = list(K.values())
    return list(rk[4:])


def F(X: list, rk: int) -> list:
    """
    轮函数
    X为为4个字的list，字格式为32位无符号整型
    rk为轮密钥，32位无符号整型
    返回值为为4个字的list，字格式为32位无符号整型
    """
    return X[0] ^ T(X[1] ^ X[2] ^ X[3] ^ rk)


def encrypt(X: tuple, MK: tuple) -> tuple:
    """
    加密函数
    X为为4个字的tuple，字格式为32位无符号整型
    MK为为4个字的list，字格式为32位无符号整型
    返回值为为4个字的tuple，字格式为32位无符号整型
    """

    # 将tuple转换为list
    X_list = list(X)

    # 计算轮密钥
    rk = key_expand(MK)

    # 32次迭代运算
    for i in range(32):
        X_list.append(F(X_list[i:i+4], rk[i]))

    # 反序变换
    Y = (X_list[35], X_list[34], X_list[33], X_list[32])
    return Y


def decrypt(X: tuple, MK: tuple) -> tuple:
    """
    解密函数
    X为为4个字的tuple，字格式为32位无符号整型
    MK为为4个字的list，字格式为32位无符号整型
    返回值为为4个字的tuple，字格式为32位无符号整型
    """
    # 注：解密变换与加密变换结构相同，不同的仅是轮密钥的使用顺序。
    # 解密时，使用轮密钥序(rk31, rk30, ... , rk0)

    X_list = list(X)

    # 计算轮密钥
    rk = key_expand(MK)

    # 32次迭代计算
    for i in range(32):
        X_list.append(F(X_list[i:i+4], rk[31-i]))  

    # 反序变换
    Y = (X_list[35], X_list[34], X_list[33], X_list[32])
    return Y


"""一些测试函数"""

def test_print_Sbox():
    """测试函数，遍历打印Sbox的每一个数据"""

    # 打印表头空白
    print("   ", end="")

    # 打印列号
    for i in range(0, 16):
        print("{0:2X} ".format(i), end="")

    # 遍历打印数组
    for j in range(0x00, 0x100):

        # 在每一行开始处打印行号
        if j % 0x10 == 0:
            print("\n{0:2X}".format(j // 0x10), end=" ")

        # 打印数组内容
        if Sbox[j] < 0x10:
            print("0{0:X}".format(Sbox[j]), end=' ')
        else:
            print("{0:2X}".format(Sbox[j]), end=' ')

    print()


def test_RLS32():
    """测试函数，测试循环左移函数"""

    magic1 = 0x02468ACE
    magic2 = 0x13579BDF

    for i in range(33):
        print("RLS32(0x{0:8X}, {1:d}) == 0x{2:8X}".format(magic1, i, RLS32(magic1, i)))

    for i in range(33):
        print("RLS32(0x{0:8X}, {1:d}) == 0x{2:8X}".format(magic2, i, RLS32(magic2, i)))

    
def test_example1():
    """附录A.1 示例1"""

    X = (0x01234567, 0x89ABCDEF, 0xFEDCBA98, 0x76543210)
    MK = (0x01234567, 0x89ABCDEF, 0xFEDCBA98, 0x76543210)
    
    rk = key_expand(MK)

    X_list = list(X)

    for i in range(32):
        X_list.append(F(X_list[i:i+4], rk[i]))
        print("rk[{0:2d}]={1:8X}".format(i, rk[i]), end="\t")
        print("X[{0:2d}]={1:8X}".format(i+4, X_list[i+4]))

    Y = encrypt(X, MK)

    # 预期输出结果为：68 1E DF 34 D2 06 96 5E 86 B3 E9 4F 53 6E 42 46
    print("{0:8X}{1:8X}{2:8X}{3:8X}".format(Y[0], Y[1], Y[2], Y[3]))


def test_example2():
    """附录A.2 示例2"""

    X = (0x01234567, 0x89ABCDEF, 0xFEDCBA98, 0x76543210)
    MK = (0x01234567, 0x89ABCDEF, 0xFEDCBA98, 0x76543210)


    temp = X
    for i in range(1000000):
        temp = encrypt(temp, MK)

    Y = temp

    # 预期输出结果为：59 52 98 C7 C6 FD 27 1F 04 02 F8 04 C3 3D 3F 66
    print("{0:8X}{1:8X}{2:8X}{3:8X}".format(Y[0], Y[1], Y[2], Y[3]))


def test_decrypt():
    """测试函数，测试解密"""

    X = (0x01234567, 0x89ABCDEF, 0xFEDCBA98, 0x76543210)
    MK = (0x01234567, 0x89ABCDEF, 0xFEDCBA98, 0x76543210)
    Y = encrypt(X, MK)
    X_prime = decrypt(Y, MK)

    print("{0:8X}{1:8X}{2:8X}{3:8X}".format(X_prime[0], X_prime[1], X_prime[2], X_prime[3]))

    